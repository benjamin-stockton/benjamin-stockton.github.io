#| label: tbl-conj-inf
#| output-location: column-fragment
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
mcmc_summary <- rbind(fit1$summary(variables = c("beta", "sigma")),
fit2$summary(variables = c("beta", "sigma")))
#| label: set-up
#| results: hold
#| code-line-numbers: "|1,2,3,5|8"
# install.packages("cmdstanr",
#                  repos = c("https://mc-stan.org/r-packages/",
#                            getOption("repos")))
library(cmdstanr)
# cmdstanr::install_cmdstan()
cmdstanr::cmdstan_version()
cmdstanr::cmdstan_path()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
# install.packages(c("bayesplot", "ggplot2", "posterior"))
#| label: load-data
#| code-overflow: wrap
ncaaw <- readr::read_csv(file = "Data/NCAAW-freethrows-threes-2022-2023.csv")
#| label: fig-scatter
#| fig-cap: Scatter plot of the Total Wins by 3 pt Field Goal %.
library(ggplot2)
ggplot(ncaaw, aes(FG3pct, W)) +
geom_point() +
labs(title = "2022-23 NCAAW Wins by 3pt%",
subtitle = paste0("r = ", round(cor(ncaaw$W, ncaaw$FG3pct), 3)),
x = "3pt%", y = "Wins") +
theme_bw()
#| label: lm-fit
#| code-line-numbers: "1,2,3,4|8"
#| results: hold
fit_ml <- lm(W ~ FG3pct, data = ncaaw)
(beta_ml <- coef(fit_ml))
smry_ml <- summary(fit_ml)
(sigma_ml <- smry_ml$sigma)
mles <- data.frame(Parameters = c("beta_0", "beta_1", "sigma"),
Estimates = c(beta_ml, sigma_ml))
#| label: fig-scatter-fitted
#| fig-cap: Now the OLS regression line is super-imposed in blue.
ggplot(ncaaw, aes(FG3pct, W)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "2022-23 NCAAW Wins by 3pt%",
subtitle = paste0("r = ", round(cor(ncaaw$W, ncaaw$FG3pct), 3)),
x = "3pt%", y = "Wins") +
theme_bw()
#| label: non-info-comp-fit
#| output-location: fragment
#| warning: false
#| code-line-numbers: "1-5|7|8|10-19|"
data_list <- list(
N = nrow(ncaaw),
y = ncaaw$W,
x = ncaaw$FG3pct
)
file <- file.path("non-informative-regression.stan")
non_inf_model <- cmdstan_model(file)
fit1 <- non_inf_model$sample(
data = data_list,
iter_warmup = 1000,
iter_sampling = 1000,
thin = 1,
refresh = 500,
chains = 2,
show_messages = TRUE,
# show_exceptions = FALSE
)
#| label: non-inf-summary
fit1$diagnostic_summary()
#| label: fig-traceplots-non-info
#| output-location:  slide
#| layout-ncol: 3
#| fig-cap: Diagnostic plots from the `bayesplot` package.
#| fig-subcap:
#|    - Traceplots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$.
#|    - Autocorrelation Function (ACF) plots for $\beta$ and $\sigma$.
#| fig-width: 6
#| fig-height: 6
library(bayesplot)
mcmc_trace(fit1$draws(variables = c("beta", "sigma")))
mcmc_dens_overlay(fit1$draws(variables = c("beta", "sigma")))
mcmc_acf_bar(fit1$draws(variables = c("beta", "sigma")))
#| label: tbl-non-info-inf
#| output-location: fragment
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
fit1$summary(variables = c("beta", "sigma")) |>
kableExtra::kbl(booktabs = TRUE, format = "html", digits = 3)
#| label: tbl-mle-res-1
#| output-location: column-fragment
#| tbl-cap: MLE estimates for $\beta$ and $\sigma$.
mles |>
kableExtra::kbl(booktabs = TRUE,
format = "html", digits = 3)
#| label: fig-non-info-ci
#| output-location:  fragment
#| layout-ncol: 2
#| fig-cap: ""
#| fig-subcap:
#|    - Interval plots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$ in a ridgeline plot.
#| fig-width: 6
#| fig-height: 4
mcmc_intervals(fit1$draws(variables = c("beta", "sigma")))
mcmc_areas_ridges(fit1$draws(variables = c("beta", "sigma")),
prob_outer = 0.95, prob = 0.5)
#| label: fig-non-info-ppc
#| output-location: fragment
#| layout-ncol: 2
#| fig-cap: Posterior Predictive Check plots from `bayesplot`.
#| fig-subcap:
#|     - PPD densities for the wins given 3pt%.
#|     - PPD intervals for the wins plotted by 3pt%.
library(posterior)
y_ppd <- as.matrix(as_draws_df(fit1$draws(variables = "y_ppd")))
ppc_dens_overlay(ncaaw$W,
y_ppd[1:50, 1:350]) +
labs(title = "Density of PPD Draws of NCAAW Wins",
x = "Wins")
ppc_intervals(ncaaw$W,
y_ppd[1:50, 1:350],
x = ncaaw$FG3pct) +
labs(title = "Density of PPD Draws of NCAAW Wins by 3pt%",
x = "3pt%", y = "Wins")
#| label: conj-comp-fit
#| output-location: fragment
#| warning: false
data_list2 <- list(
N = nrow(ncaaw),
K = 1,
y = ncaaw$W,
X = as.matrix(ncaaw$FG3pct, nrow = nrow(ncaaw)),
# hyperparameters
beta_0 = 0,
lambda_0 = 10,
nu_0 = 1,
s_02 = 47
)
file2 <- file.path("conjugate-regression.stan")
conj_model <- cmdstan_model(file2)
fit2 <- conj_model$sample(
data = data_list2,
iter_warmup = 1000,
iter_sampling = 1000,
thin = 1,
refresh = 500,
chains = 2,
show_messages = TRUE,
# show_exceptions = FALSE
)
#| label: conj-summary
fit2$diagnostic_summary()
#| label: fig-traceplots-conj
#| output-location:  fragment
#| layout-ncol: 3
#| fig-cap: ""
#| fig-subcap:
#|    - Traceplots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$.
#|    - ACF plots for $\beta$ and $\sigma$.
#| fig-width: 6
#| fig-height: 4
mcmc_trace(fit2$draws(variables = c("beta", "sigma")))
mcmc_dens_overlay(fit2$draws(variables = c("beta", "sigma")))
mcmc_acf_bar(fit2$draws(variables = c("beta", "sigma")))
#| label: tbl-conj-inf
#| output-location: column-fragment
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
mcmc_summary <- rbind(fit1$summary(variables = c("beta", "sigma")),
fit2$summary(variables = c("beta", "sigma")))
mcmc_summary$Model <- c(rep("Non-info", 3), rep("Conj", 3))
mcmc_summary[,c("Model", "variable", "mean", "sd")] |>
kableExtra::kbl(booktabs = TRUE, format = "html", digits = 3)
#| label: tbl-conj-inf
#| output-location: column-fragment
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
mcmc_summary <- cbind(fit1$summary(variables = c("beta", "sigma"))[,c("variable", "mean", "sd")],
fit2$summary(variables = c("beta", "sigma"))[,c("mean", "sd")])
mcmc_summary |>
kableExtra::kbl(booktabs = TRUE, format = "html", digits = 3)
#| label: tbl-conj-inf
#| output-location: column-fragment
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
mcmc_summary <- cbind(mles,
fit1$summary(variables = c("beta", "sigma"))[,c("mean", "sd")])
mcmc_summary <- cbind(mcmc_summary,
fit2$summary(variables = c("beta", "sigma"))[,c("mean", "sd")])
colnames(mcmc_summary) <- c("Variable", "MLE",
"Non-info Est", "Non-info SD",
"Conj Est", "Conj SD")
mcmc_summary |>
kableExtra::kbl(booktabs = TRUE, format = "html", digits = 3)
#| label: set-up
#| results: hold
# install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
# cmdstanr::install_cmdstan()
cmdstanr::cmdstan_version()
cmdstanr::cmdstan_path()
cmdstanr::check_cmdstan_toolchain()
# install.packages(c("bayesplot", "ggplot2", "posterior"))
#| label: load-data
#| results: hold
ncaaw <- readr::read_csv(file = "Data/NCAAW-freethrows-threes-2022-2023.csv")
#| label: fig-scatter
#| results: hold
#| fig-cap: Scatter plot of the Total Wins by 3 pt Field Goal %.
library(ggplot2)
ggplot(ncaaw, aes(FG3pct, W)) +
geom_point() +
labs(title = "2022-23 NCAAW Wins by 3pt%",
subtitle = paste0("r = ", round(cor(ncaaw$W, ncaaw$FG3pct), 3)),
x = "3pt%",
y = "Wins")
#| label: lm-fit
#| results: hold
fit_ml <- lm(W ~ FG3pct, data = ncaaw)
(beta_ml <- coef(fit_ml))
smry_ml <- summary(fit_ml)
(sigma_ml <- smry_ml$sigma)
mles <- data.frame(Parameters = c("beta_0", "beta_1", "sigma"),
Estimates = c(beta_ml, sigma_ml))
#| label: fig-scatter-ols
#| results: hold
#| fig-cap: Now the OLS regression line is super-imposed in blue.
library(ggplot2)
ggplot(ncaaw, aes(FG3pct, W)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "2022-23 NCAAW Wins by 3pt%",
subtitle = paste0("r = ", round(cor(ncaaw$W, ncaaw$FG3pct), 3)),
x = "3pt%",
y = "Wins")
#| label: non-info-comp-fit
#| results: hold
#| warning: false
data_list <- list(
N = nrow(ncaaw),
y = ncaaw$W,
x = ncaaw$FG3pct
)
file <- file.path("non-informative-regression.stan")
non_inf_model <- cmdstan_model(file)
fit1 <- non_inf_model$sample(
data = data_list,
iter_warmup = 1000,
iter_sampling = 1000,
thin = 1,
refresh = 500,
chains = 2,
show_messages = TRUE,
show_exceptions = FALSE
)
#| label: non-inf-summary
#| results: hold
fit1$diagnostic_summary()
#| label: fig-traceplots-non-info
#| results: hold
#| layout-ncol: 2
#| fig-cap: Diagnostic plots for the posterior samples. Plots were made using the `bayesplot` package.
#| fig-subcap:
#|    - Traceplots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$.
library(bayesplot)
mcmc_trace(fit1$draws(variables = c("beta", "sigma")))
mcmc_dens_overlay(fit1$draws(variables = c("beta", "sigma")))
#| label: tbl-non-info-inf
#| results: hold
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
fit1$summary(variables = c("beta", "sigma")) |>
kableExtra::kbl(booktabs = TRUE, format = "html")
#| label: tbl-mle-res-1
#| output-location: column-fragment
#| tbl-cap: MLE estimates for $\beta$ and $\sigma$.
mles |>
kableExtra::kbl(booktabs = TRUE,
format = "html", digits = 3)
#| label: fig-non-info-ci
#| results: hold
#| layout-ncol: 2
#| fig-cap: Plots for the 50% Credible Interval (inner band) and 95% Credible Interval (outer band) for $\beta$ and $\sigma$. Plots were made using the `bayesplot` package.
#| fig-subcap:
#|    - Interval plots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$ in a ridgeline plot.
mcmc_intervals(fit1$draws(variables = c("beta", "sigma")))
mcmc_areas_ridges(fit1$draws(variables = c("beta", "sigma")),
prob_outer = 0.95, prob = 0.5)
#| label: fig-non-info-ppc
#| results: hold
#| layout-ncol: 2
#| fig-cap: Posterior Predictive Check plots from `bayesplot`.
#| fig-subcap:
#|     - PPD densities for the wins given 3pt%.
#|     - PPD intervals for the wins plotted by 3pt%.
library(posterior)
y_ppd <- as.matrix(as_draws_df(fit1$draws(variables = "y_ppd")))
ppc_dens_overlay(ncaaw$W,
y_ppd[1:50, 1:350]) +
labs(title = "Density of PPD Draws of NCAAW Wins",
x = "Wins")
ppc_intervals(ncaaw$W,
y_ppd[1:50, 1:350],
x = ncaaw$FG3pct) +
labs(title = "Density of PPD Draws of NCAAW Wins by 3pt%",
x = "3pt%",
y = "Wins")
#| label: conj-comp-fit
#| results: hold
#| warning: false
data_list2 <- list(
N = nrow(ncaaw),
K = 1,
y = ncaaw$W,
X = as.matrix(ncaaw$FG3pct, nrow = nrow(ncaaw)),
# hyperparameters
beta_0 = 0,
lambda_0 = 0.5,
nu_0 = 1,
s_02 = 47
)
file2 <- file.path("conjugate-regression.stan")
conj_model <- cmdstan_model(file2)
fit2 <- conj_model$sample(
data = data_list2,
iter_warmup = 1000,
iter_sampling = 1000,
thin = 1,
refresh = 500,
chains = 2,
show_messages = TRUE,
show_exceptions = FALSE
)
#| label: conj-summary
#| results: hold
fit2$diagnostic_summary()
#| label: fig-traceplots-conj
#| results: hold
#| layout-ncol: 2
#| fig-cap: Diagnostic plots for the posterior samples. Plots were made using the `bayesplot` package.
#| fig-subcap:
#|    - Traceplots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$.
mcmc_trace(fit2$draws(variables = c("beta", "sigma")))
mcmc_dens_overlay(fit2$draws(variables = c("beta", "sigma")))
#| label: tbl-conj-inf
#| results: hold
#| tbl-cap: Summary statistics for the posterior samples for $\beta$ and $\sigma$.
fit2$summary(variables = c("beta", "sigma")) |>
kableExtra::kbl(booktabs = TRUE, format = "html")
#| label: tbl-fit-comp
#| results: hold
#| tbl-cap: Comparison of the estimates for $\beta$ and $\sigma$.
mcmc_summary <- cbind(mles,
fit1$summary(variables = c("beta", "sigma"))[,c("mean", "sd")])
mcmc_summary <- cbind(mcmc_summary,
fit2$summary(variables = c("beta", "sigma"))[,c("mean", "sd")])
colnames(mcmc_summary) <- c("Variable", "MLE", "Non-info Est", "Non-info SD", "Conj Est", "Conj SD")
mcmc_summary |>
kableExtra::kbl(booktabs = TRUE, format = "html", digits = 3)
#| label: fig-conj-ci
#| results: hold
#| layout-ncol: 2
#| fig-cap: Plots for the 50% Credible Interval (inner band) and 95% Credible Interval (outer band) for $\beta$ and $\sigma$. Plots were made using the `bayesplot` package.
#| fig-subcap:
#|    - Interval plots for $\beta$ and $\sigma$.
#|    - Approximate posterior densities for $\beta$ and $\sigma$ in a ridgeline plot.
mcmc_intervals(fit2$draws(variables = c("beta", "sigma")))
mcmc_areas_ridges(fit2$draws(variables = c("beta", "sigma")),
prob_outer = 0.95, prob = 0.5)
#| label: fig-conj-ppc
#| results: hold
#| layout-ncol: 2
#| fig-cap: Posterior Predictive Check plots from `bayesplot`.
#| fig-subcap:
#|     - PPD densities for the wins given 3pt%.
#|     - PPD intervals for the wins plotted by 3pt%.
y_ppd <- as.matrix(as_draws_df(fit2$draws(variables = "y_ppd")))
ppc_dens_overlay(ncaaw$W,
y_ppd[1:50, 1:350]) +
labs(title = "Density of PPD Draws of NCAAW Wins",
x = "Wins")
ppc_intervals(ncaaw$W,
y_ppd[1:50, 1:350],
x = ncaaw$FG3pct) +
labs(title = "Density of PPD Draws of NCAAW Wins by 3pt%",
x = "3pt%",
y = "Wins")
#| label: load-ncaaw-i
#| results: hold
ncaaw_i <- read.csv("Data/ncaaw-individuals.csv", header = TRUE)
head(ncaaw_i)
#| label: fig-miss-patt
#| results: hold
#| fig-cap: Missing data patterns for the NCAA women's basketball players from 2020-2023 who played in their junior and senior year. The red boxes correspond to missing values, so there are 176 players who recorded full senior seasons (played in >75% of total games) but missing or shortened junior seasons.
library(mice)
m_pat <- md.pattern(ncaaw_i, plot = TRUE)
#| label: fig-ppg-jr-sr
#| results: hold
#| fig-cap: Points per game (PPG) from Junior and Senior seasons.
#| warning: false
ggplot(ncaaw_i, aes(PPG_jr, PPG_sr, color = G_jr)) +
geom_point() +
scale_color_viridis_c(name = "G - Jr") +
labs(x = "PPG - Jr",
y = "PPG - Sr") +
theme_bw()
#| label: mice-fit
#| results: hold
#| warning: false
#| cache: true
library(brms)
imps <- mice(ncaaw_i, m = 10, method = "norm", maxit = 10, printFlag = FALSE)
fit_brm_mice <- brm_multiple(PPG_sr ~ G_jr * PPG_jr, data = imps, chains = 2,
refresh = 0)
summary(fit_brm_mice)
#| label: brm-mi-fit
#| results: hold
#| warning: false
#| cache: true
bform <- bf(PPG_sr | mi() ~ mi(G_jr) * mi(PPG_jr)) +
bf(PPG_jr | mi() ~ G_sr + PPG_sr) +
bf(G_jr | mi() ~ G_sr + PPG_sr) + set_rescor(FALSE)
fit_brm_mi <- brm(bform, data = ncaaw_i,
refresh = 500, iter = 2000, thin = 1,
backend = "cmdstanr",
control = list(adapt_delta = 0.8,
max_depth = 10,
show_exceptions = FALSE),
chains = 2,
cores = 2)
summary(fit_brm_mi)
#| label: fig-brm-mi-trace
#| results: hold
#| layout-nrow: 2
#| fig-cap: Traceplots of brms analysis model parameters.
#| fig-subcap:
#|   - ""
#|   - ""
plot(fit_brm_mi, variable = c("b_PPGsr", "bsp_"), regex = TRUE, ask = FALSE, N = 3)
#| label: fig-brm-mi-trace-imp
#| results: hold
#| layout-nrow: 2
#| fig-cap: Traceplots of brms imputation model parameters.
#| fig-subcap:
#|   - $PPG_{jr}$ imputation model parameters
#|   - $G_{jr}$ imputation model parameters
plot(fit_brm_mi, variable = c("b_PPGjr", "b_Gjr"), regex = TRUE, ask = FALSE, N = 3)
#| label: fig-brm-mi-cond-eff
#| results: hold
#| fig-cap: The estimated conditional effects of PPG as a junior and junior-year Games played on PPG as a senior.
#| fig-subcap:
#|   - Estimates after MICE imputation
#|   - Estimates with joint model
#| fig-height: 5
#| fig-width: 6
plot(brms::conditional_effects(fit_brm_mice, "PPG_jr:G_jr", resp = "PPGsr")) +
coord_cartesian(xlim = c(15, 30)) +
labs(title = "MICE")
plot(brms::conditional_effects(fit_brm_mi, "PPG_jr:G_jr", resp = "PPGsr")) +
labs(title = "Imputed during Fitting")
plot(brms::conditional_effects(fit_brm_mi, "PPG_jr:G_jr", resp = "PPGsr"))
#| label: fig-brm-mi-cond-eff
#| results: hold
#| fig-cap: The estimated conditional effects of PPG as a junior and junior-year Games played on PPG as a senior.
#| fig-subcap:
#|   - Estimates after MICE imputation
#|   - Estimates with joint model
#| fig-height: 5
#| fig-width: 6
plot(brms::conditional_effects(fit_brm_mice, "PPG_jr:G_jr", resp = "PPGsr"))
plot(brms::conditional_effects(fit_brm_mi, "PPG_jr:G_jr", resp = "PPGsr"))
