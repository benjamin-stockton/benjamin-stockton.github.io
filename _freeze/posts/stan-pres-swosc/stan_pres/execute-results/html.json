{
  "hash": "7678eb2c27dc19a75a2f29f08950d56f",
  "result": {
    "markdown": "---\ntitle: \"Getting to Know Stan\"\nauthor: \"Ben Stockton\"\ndate: 11-16-2023\nformat: \n    revealjs:\n        theme: white\n        smaller: true\n        code-overflow: wrap\n        slide-number: true\neditor: visual\nresults: hold\nwarnings: false\necho: true\nbibliography: swosc-stan.bib\ndraft: false\n---\n\n\n# Some Brief Set-up\n\n## Installation\n\n::: columns\n::: {.column width=\"50%\"}\n-   I'll use the CmdStan toolchain in R with the `cmdstanr` [package](https://mc-stan.org/cmdstanr/) [@gabry2023].\n\n-   There are also Python, command line, Matlab, Julia, and Stata interfaces to Stan and a Python interface for cmdstan called [CmdStanPy](https://github.com/stan-dev/cmdstanpy) [@cmdstanp].\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"cmdstanr\",\n#                  repos = c(\"https://mc-stan.org/r-packages/\",\n#                            getOption(\"repos\")))\nlibrary(cmdstanr)\n# cmdstanr::install_cmdstan()\ncmdstanr::cmdstan_version()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2.33.1\"\n```\n:::\n\n```{.r .cell-code}\ncmdstanr::cmdstan_path()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/stocb/OneDrive/Documents/.cmdstan/cmdstan-2.33.1\"\n```\n:::\n\n```{.r .cell-code}\ncmdstanr::check_cmdstan_toolchain(fix = TRUE)\n```\n:::\n\n:::\n:::\n\n## A Very Brief Introduction to Bayesian Data Analysis\n\n-   Incorporate prior knowledge about the model/data into our analysis\n\n-   Bayesian inference treats the parameters of the model as random variables\n\n::: callout-important\n## Bayes Rule\n\nLet $\\theta$ be a r.v. with (prior) distribution $p(\\theta)$, $Y$ be a r.v. with likelihood $p(y | \\theta)$. Their joint distribution is $p(y, \\theta) = p(y|\\theta) p(\\theta)$.\n\nBayes rule lets us flip the conditioning from the likelihood to get\n\n$$\np(\\theta | y) = \\frac{p(y, \\theta)}{p(y)} = \\frac{p(y|\\theta) p(\\theta)}{\\int p(y, \\theta) d\\theta} \\approx p(y|\\theta) p(\\theta)\n$$\n:::\n\n## The Components of Bayesian Inference\n\nTwo sets of random variables to model: parameters $\\theta$ and data $Y$\n\n1.  **The Prior:** $p(\\theta)$ does not depend on $Y$\n2.  **The (Data) Likelihood:** $p(y | \\theta)$ models $Y$ dependent on $\\theta$\n3.  **The Posterior:** $p(\\theta | y)$ models $\\theta$ given $Y$ and the prior\n\n\n```{=tex}\n\\begin{align*}\n    p(\\theta | y) &= \\frac{p(\\theta, y)}{p(y)} \\\\\n        &= \\frac{p(\\theta) \\times p(y | \\theta)}{\\int p(y|\\theta) p(\\theta)} \\\\\n        &\\propto p(\\theta) p(y | \\theta) \\\\\n\\end{align*}\n```\n\nMake inferences about $\\theta$ with the posterior distribution\n\n# Example Time\n\n## NCAA Women's Basketball\n\n::: columns\n::: {.column width=\"50%\"}\nWe'll model NCAA Women's Basketball team's total wins by their 3 point field goal percentage from the 2022-2023 season.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nncaaw_file <- file.path(\"Data\", \"NCAAW-freethrows-threes-2022-2023.csv\")\nncaaw <- readr::read_csv(file = ncaaw_file)\n```\n:::\n\n\nIn the 2022-2023 season there were $N = 350$ teams.\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![Scatter plot of the Total Wins by 3 pt Field Goal %. The OLS regression line is super-imposed in blue.](stan_pres_files/figure-revealjs/fig-scatter-1.png){#fig-scatter width=960}\n:::\n:::\n\n:::\n:::\n\n## Baseline ML Estimates\n\n::: columns\n::: {.column width=\"50%\"}\nAs a baseline, we'll find the maximum likelihood estimates for the regression parameters and variance.\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ml <- lm(W ~ FG3pct, data = ncaaw)\n\ncoef(fit_ml)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)      FG3pct \n  -14.94468     1.00929 \n```\n:::\n\n```{.r .cell-code}\nsmry_ml <- summary(fit_ml)\nsmry_ml$sigma^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 34.90616\n```\n:::\n:::\n\n:::\n:::\n\n# Non-informative Prior Regression Model\n\n## Model #1 Set-up\n\nLet's consider the simple regression model $E(Y_i | X_i, \\boldsymbol{\\beta}, \\sigma^2) = \\beta_0 + \\beta_1 X_i$ and $Var(Y_i | X_i = x_i, \\boldsymbol{\\beta}, \\sigma^2) = \\sigma^2$ [@gelman2013bayesian, p. 354-358].\n\n1.  **The Prior:** $p(\\boldsymbol{\\beta}, \\log\\sigma) = 1 \\equiv p(\\boldsymbol{\\beta}, \\sigma^2) \\propto \\sigma^{-2}$\n2.  **The (Data) Likelihood:** $\\mathbf{Y} | \\boldsymbol{\\beta}, \\sigma^2 \\sim N_N(X\\boldsymbol{\\beta}, \\sigma^2 I_N).$\n3.  **The Posterior:**\n\n\n```{=tex}\n\\begin{align*}\n    p(\\boldsymbol{\\beta}, \\sigma^2 | \\mathbf{y}) &= p(\\boldsymbol{\\beta} | \\sigma^2, \\mathbf{y}) \\times p(\\sigma^2 | \\mathbf{y}) \\\\\n        &= N_2(\\boldsymbol{\\beta} | \\hat{\\boldsymbol{\\beta}}, \\sigma^2 (X'X)^{-1}) \\times Inv-\\chi^2 (\\sigma^2 | N-2, s^2) \\\\\n    \\hat{\\boldsymbol{\\beta}} &= (X'X)^{-1} X'\\mathbf{y} \\\\\n    s^2 &= \\frac{1}{N-2} (\\mathbf{y} - X\\hat{\\boldsymbol{\\beta}})' (\\mathbf{y} - X\\hat{\\boldsymbol{\\beta}})   \n\\end{align*}\n```\n\n## Non-informative Prior Regression Stan Code\n\n``` {.stan .code-overflow-wrap filename=\"non-informative-regression.stan\"}\n// The input data is two vectors 'y' and 'X' of length 'N'.\ndata {\n  int<lower=0> N;\n  vector[N] y;\n  vector[N] x;\n}\n\ntransformed data {\n    matrix[N, 2] X_c = append_col(rep_vector(1, N), x);\n    matrix[2,2] XtX_inv = inverse(X_c' * X_c);\n\n    vector[2] beta_hat = XtX_inv * X_c' * y;\n    vector[N] y_hat = X_C * beta_hat;\n    \n    real<lower=0> s_2 = 1 / (N - 2) * (y - y_hat)' * (y - y_hat);\n}\n\n// The parameters accepted by the model. Our model\n// accepts two parameters 'beta' and 'sigma'.\nparameters {\n  vector beta;\n  real<lower=0> sigma; // Note that this is the variance\n}\n\n// The model to be estimated. We model the output\n// 'y' ~ N(x beta, sigma) by specifying the analytic\n// posterior defined above.\nmodel {\n  beta ~ multi_normal(beta_hat, sigma^2 * XtX_inv);\n  \n  sigma^2 ~ scaled_inv_chi_square(N-2, sqrt(s_2));\n}\n\ngenerated quantities {\n    vector[N] y_ppd;\n    \n    for (i in 1:N) {\n        y_ppd[i] = normal_rng(X_c[i,] * beta, sigma);\n    }\n}\n```\n\n## Model #1 Fitting\n\n::: columns\n::: {.column width=\"50%\"}\n-   First we write the Stan code in a separate file[^1].\n\n-   1000 warmup iterations, 1000 sampling iterations\n\n-   No thinning (thinning includes only every $k$th draw)\n\n-   Refresh the print screen to see progress every 500 iterations.\n\n-   Run several chains (in parallel)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndata_list <- list(\n    N = nrow(ncaaw),\n    y = ncaaw$W,\n    x = ncaaw$FG3pct\n)\n\nfile <- file.path(\"non-informative-regression.stan\")\nnon_inf_model <- cmdstan_model(file)\n\nfit1 <- non_inf_model$sample(\n    data = data_list,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    thin = 1,\n    refresh = 500,\n    chains = 2,\n    show_messages = TRUE,\n    # show_exceptions = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 2 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.4 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.4 seconds.\n\nBoth chains finished successfully.\nMean chain execution time: 0.4 seconds.\nTotal execution time: 1.0 seconds.\n```\n:::\n:::\n\n:::\n:::\n\n[^1]:\n    -   See the [Stan User's Guide Part 1.1](https://mc-stan.org/docs/stan-users-guide/linear-regression.html#vectorization.section) for programming this model without the analytic posteriors.\n\n## Model #1 Diagnostics\n\n::: columns\n::: {.column width=\"50%\"}\n-   Diagnostic summary generated by Stan\n\n-   Plots created using the `bayesplot` package.\n\n    -   Trace plots\n\n    -   Density Plots\n\n    -   ACF Plots\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfit1$diagnostic_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$num_divergent\n[1] 0 0\n\n$num_max_treedepth\n[1] 0 0\n\n$ebfmi\n[1] 1.139487 1.103150\n```\n:::\n:::\n\n::: {#fig-traceplots-non-info .cell layout-ncol=\"2\" output-location='slide'}\n\n```{.r .cell-code}\nlibrary(bayesplot)\n\nmcmc_trace(fit1$draws(variables = c(\"beta\", \"sigma\")))\nmcmc_dens_overlay(fit1$draws(variables = c(\"beta\", \"sigma\")))\n```\n\n::: {.cell-output-display}\n![Traceplots for $\\beta$ and $\\sigma$.](stan_pres_files/figure-revealjs/fig-traceplots-non-info-1.png){#fig-traceplots-non-info-1 width=576}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$.](stan_pres_files/figure-revealjs/fig-traceplots-non-info-2.png){#fig-traceplots-non-info-2 width=576}\n:::\n\nDiagnostic plots from the `bayesplot` package.\n:::\n\n:::\n:::\n\n## Model #1 Inference\n\n-   The summary statistics are displayed in @tbl-non-info-inf.\n\n-   The statistics `rhat`, `ess_bulk`, and `ess_tail` are additional diagnostics.\n\n\n::: {#tbl-non-info-inf .cell output-location='fragment' tbl-cap='Summary statistics for the posterior samples for $\\beta$ and $\\sigma$.'}\n\n```{.r .cell-code}\nfit1$summary(variables = c(\"beta\", \"sigma\")) |> \n    kableExtra::kbl(booktabs = TRUE, format = \"html\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> variable </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> median </th>\n   <th style=\"text-align:right;\"> sd </th>\n   <th style=\"text-align:right;\"> mad </th>\n   <th style=\"text-align:right;\"> q5 </th>\n   <th style=\"text-align:right;\"> q95 </th>\n   <th style=\"text-align:right;\"> rhat </th>\n   <th style=\"text-align:right;\"> ess_bulk </th>\n   <th style=\"text-align:right;\"> ess_tail </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> beta[1] </td>\n   <td style=\"text-align:right;\"> -15.021382 </td>\n   <td style=\"text-align:right;\"> -14.929350 </td>\n   <td style=\"text-align:right;\"> 2.9355004 </td>\n   <td style=\"text-align:right;\"> 2.8945541 </td>\n   <td style=\"text-align:right;\"> -20.0412700 </td>\n   <td style=\"text-align:right;\"> -10.198820 </td>\n   <td style=\"text-align:right;\"> 1.006652 </td>\n   <td style=\"text-align:right;\"> 423.7154 </td>\n   <td style=\"text-align:right;\"> 654.0793 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> beta[2] </td>\n   <td style=\"text-align:right;\"> 1.011405 </td>\n   <td style=\"text-align:right;\"> 1.008425 </td>\n   <td style=\"text-align:right;\"> 0.0942984 </td>\n   <td style=\"text-align:right;\"> 0.0924171 </td>\n   <td style=\"text-align:right;\"> 0.8588435 </td>\n   <td style=\"text-align:right;\"> 1.173300 </td>\n   <td style=\"text-align:right;\"> 1.006900 </td>\n   <td style=\"text-align:right;\"> 433.1409 </td>\n   <td style=\"text-align:right;\"> 653.6244 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sigma </td>\n   <td style=\"text-align:right;\"> 5.912732 </td>\n   <td style=\"text-align:right;\"> 5.910570 </td>\n   <td style=\"text-align:right;\"> 0.2119075 </td>\n   <td style=\"text-align:right;\"> 0.2162372 </td>\n   <td style=\"text-align:right;\"> 5.5762390 </td>\n   <td style=\"text-align:right;\"> 6.271867 </td>\n   <td style=\"text-align:right;\"> 1.002239 </td>\n   <td style=\"text-align:right;\"> 761.4264 </td>\n   <td style=\"text-align:right;\"> 892.0610 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Model #1 Graphical Summaries\n\n-   @fig-non-info-ci-1 displays 50% (thick bar) and 95% (thin bar) credible intervals with the posterior mean displayed as a point. The densities are plotted in ridgelines in @fig-non-info-ci-2.\n\n-   Plots were made using the `bayesplot` package.\n\n\n::: {#fig-non-info-ci .cell layout-ncol=\"2\" output-location='fragment'}\n\n```{.r .cell-code}\nmcmc_intervals(fit1$draws(variables = c(\"beta\", \"sigma\")))\nmcmc_areas_ridges(fit1$draws(variables = c(\"beta\", \"sigma\")),\n                  prob_outer = 0.95, prob = 0.5)\n```\n\n::: {.cell-output-display}\n![Interval plots for $\\beta$ and $\\sigma$.](stan_pres_files/figure-revealjs/fig-non-info-ci-1.png){#fig-non-info-ci-1 width=576}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$ in a ridgeline plot.](stan_pres_files/figure-revealjs/fig-non-info-ci-2.png){#fig-non-info-ci-2 width=576}\n:::\n\n\n:::\n\n\n## Model #1 Posterior Predictive Checks\n\n-   One way to check model fit is to assess posterior predictive distrubtion.\n\n-   Draw samples from the posterior predictive distribution $p(y^{new} | y) = \\int p(y^{new} | \\boldsymbol{\\beta}, \\sigma) p(\\boldsymbol{\\beta}, \\sigma | y) d\\boldsymbol{\\beta}d\\sigma$ by\n\n1.  Sampling from the posterior (i.e. the draws in the MCMC chains)\n2.  For each set of draws sampling $y^{new}$ given the corresponding values for $x^{new}$\n\n-   In Stan this is easily accomplished using the generated quantities block.\n\n``` stan\ngenerated quantities {\n    // create a vector of N new observations\n    vector[N] y_ppd; \n    \n    // for each observation, sample from the regression likelihod\n    // using the posterior draws\n    for (i in 1:N) {\n        y_ppd[i] = normal_rng(X_c[i,] * beta, sigma);\n    }\n}\n```\n\n## Model #1 Posterior Predictive Plots\n\n\n::: {#fig-non-info-ppc .cell layout-ncol=\"2\" output-location='fragment'}\n\n```{.r .cell-code}\nlibrary(posterior)\n\nfit1$draws(variables = \"y_ppd\") |> \n    as_draws_df() |>\n    as.matrix() -> y_ppd\n\nppc_dens_overlay(ncaaw$W,\n                 y_ppd[1:50, 1:350]) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins\",\n         x = \"Wins\")\nppc_intervals(ncaaw$W,\n                 y_ppd[1:50, 1:350],\n                 x = ncaaw$FG3pct) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins by 3pt%\",\n         x = \"3pt%\", y = \"Wins\")\n```\n\n::: {.cell-output-display}\n![PPD densities for the wins given 3pt%.](stan_pres_files/figure-revealjs/fig-non-info-ppc-1.png){#fig-non-info-ppc-1 width=960}\n:::\n\n::: {.cell-output-display}\n![PPD intervals for the wins plotted by 3pt%.](stan_pres_files/figure-revealjs/fig-non-info-ppc-2.png){#fig-non-info-ppc-2 width=960}\n:::\n\nPosterior Predictive Check plots from `bayesplot`.\n:::\n\n\n# Conjugate Prior Regression Model\n\n## Model #2 Set-up\n\nNext, we'll implement the regression model with conjugate priors. Conjugacy refers to the situation where the prior and posterior distribution are from the same family.[^2]\n\n[^2]: See wikipedia for more details and derivations: <https://en.wikipedia.org/wiki/Bayesian_linear_regression>\n\n1.  **Conjugate prior:** $p(\\boldsymbol{\\beta}, \\sigma^2) = p(\\boldsymbol{\\beta} | \\sigma^2) p(\\sigma^2)$\n\n    1.  $\\boldsymbol{\\beta} | \\sigma^2 ~ N_2(\\boldsymbol{\\beta}_0, \\sigma^2 \\Lambda_0^{-1})$ where $\\boldsymbol{\\beta}_0 \\in \\mathbb{R}^2$ is a vector of prior coefficients, and $\\Lambda_0$ is a $2\\times2$ prior correlation matrix. $\\boldsymbol{\\beta}_0 = 0$ and $\\Lambda_0 = 10 I_2$ to get a weakly informative prior that is equivalent to ridge regression.\n\n    2.  $\\sigma^2 \\sim InvGamma(\\frac{\\nu_0}{2}, \\frac{1}{2} \\nu_0 s_0^2)$ where $\\nu_0$ is a prior sample size and $s_0$ is the prior standard deviation. We'll set these to $\\nu_0 = 1$ and $s_0^2 = 47$ the sample variance of the teams' wins.\n\n    3.  The parameters $\\boldsymbol{\\beta}_0, \\Lambda_0, \\nu_0, s_0^2$ are hyperparameters.\n\n2.  **The (Data) Likelihood:** $\\mathbf{Y} | \\boldsymbol{\\beta}, \\sigma^2 \\sim N_N(X\\boldsymbol{\\beta}, \\sigma^2 I_N).$\n\n3.  **Posterior:**\n\n    1.  $\\boldsymbol{\\beta} | \\sigma^2, y \\sim N_2(\\boldsymbol{\\beta}_N, \\sigma^2 \\Lambda_N^{-1})$ where $\\boldsymbol{\\beta}_N = \\Lambda_N^{-1}(\\mathbf{X}'\\mathbf{X} \\hat{\\boldsymbol{\\beta}} + \\Lambda_0 \\boldsymbol{\\beta}_0)$ and $\\Lambda_N = (\\mathbf{X}'\\mathbf{X} + \\Lambda_0).$\n    2.  $\\sigma^2 | y) \\sim InvGamma(\\sigma^2 | \\frac{\\nu_0 + N}{2}, \\frac{1}{2} \\nu_0 s_0^2 + \\frac{1}{2}(\\mathbf{y}'\\mathbf{y} + \\boldsymbol{\\beta}_0'\\Lambda_0 \\boldsymbol{\\beta}_0 - \\boldsymbol{\\beta}_N' \\Lambda_N \\boldsymbol{\\beta}_N)).$\n\n## Conjugate Prior Regression Stan Code\n\n``` {.stan filename=\"conjugate-regression.stan\"}\n\n// The input data is a vector 'y' of length 'N'.\ndata {\n  int<lower=0> N;\n  int<lower=0> K;\n  vector[N] y;\n  matrix[N, K] X;\n  \n  // hyperparameters\n  real beta_0;\n  real<lower=0> lambda_0;\n  real<lower=0> nu_0;\n  real<lower=0> s_02;\n}\n\ntransformed data {\n    matrix[N, K+1] X_mat = append_col(rep_vector(1, N), X);\n    vector[K+1] beta_0_vec = rep_vector(beta_0, K+1);\n    matrix[K+1, K+1] Lambda_0 = lambda_0 * identity_matrix(K+1);\n}\n\n// The parameters accepted by the model. Our model\n// accepts two parameters 'mu' and 'sigma'.\nparameters {\n  vector[K+1] beta;\n  real<lower=0> sigma2;\n}\n\n// The model to be estimated. We model the output\n// 'y' to be normally distributed with mean 'mu'\n// and standard deviation 'sigma'.\nmodel {\n  beta ~ multi_normal(beta_0_vec, sigma2 * Lambda_0);\n  sigma2 ~ scaled_inv_chi_square(nu_0, s_02);\n  \n  y ~ normal(X_mat * beta, sqrt(sigma2));\n}\n\ngenerated quantities {\n    real sigma = sqrt(sigma2);\n    vector[N] y_ppd;\n    \n    for (i in 1:N) {\n        y_ppd[i] = normal_rng(X_mat[i,] * beta, sqrt(sigma2));\n    }\n}\n```\n\n## Model #2 Fitting\n\n::: columns\n::: {.column width=\"50%\"}\n-   Program the model only through the priors and likelihood and let Stan approximate the posterior\n\n-   1000 warmup iterations, 1000 sampling iterations\n\n-   No thinning (thinning includes only every $k$th draw)\n\n-   Refresh the print screen to see progress every 500 iterations.\n\n-   Run several chains (in parallel)\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\ndata_list2 <- list(\n    N = nrow(ncaaw),\n    K = 1,\n    y = ncaaw$W,\n    X = as.matrix(ncaaw$FG3pct, nrow = nrow(ncaaw)),\n    \n    # hyperparameters\n    beta_0 = 0,\n    lambda_0 = 10,\n    nu_0 = 1,\n    s_02 = 47\n)\n\nfile2 <- file.path(\"conjugate-regression.stan\")\nconj_model <- cmdstan_model(file2)\n\nfit2 <- conj_model$sample(\n    data = data_list2,\n    iter_warmup = 1000,\n    iter_sampling = 1000,\n    thin = 1,\n    refresh = 500,\n    chains = 2,\n    show_messages = TRUE,\n    # show_exceptions = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 2 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.6 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.6 seconds.\n\nBoth chains finished successfully.\nMean chain execution time: 0.6 seconds.\nTotal execution time: 1.4 seconds.\n```\n:::\n:::\n\n:::\n:::\n\n## Model #2 Diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit2$diagnostic_summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$num_divergent\n[1] 0 0\n\n$num_max_treedepth\n[1] 0 0\n\n$ebfmi\n[1] 0.9989167 1.0040509\n```\n:::\n:::\n\n::: {#fig-traceplots-conj .cell layout-ncol=\"2\" output-location='fragment'}\n\n```{.r .cell-code}\nmcmc_trace(fit2$draws(variables = c(\"beta\", \"sigma\")))\nmcmc_dens_overlay(fit2$draws(variables = c(\"beta\", \"sigma\")))\n```\n\n::: {.cell-output-display}\n![Traceplots for $\\beta$ and $\\sigma$.](stan_pres_files/figure-revealjs/fig-traceplots-conj-1.png){#fig-traceplots-conj-1 width=576}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$.](stan_pres_files/figure-revealjs/fig-traceplots-conj-2.png){#fig-traceplots-conj-2 width=576}\n:::\n\n\n:::\n\n\n## Model #2 Inference\n\n-   Estimates are similar to Model #1, but regression coefficients are shrunk slightly to zero and variance is slightly higher\n\n-   @fig-conj-ci-1 displayes credible intervals and densities are plotted as ridgelines in @fig-conj-ci-2.\n\n\n::: {#tbl-conj-inf .cell output-location='fragment' tbl-cap='Summary statistics for the posterior samples for $\\beta$ and $\\sigma$.'}\n\n```{.r .cell-code}\nfit2$summary(variables = c(\"beta\", \"sigma\")) |> \n    kableExtra::kbl(booktabs = TRUE, format = \"html\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> variable </th>\n   <th style=\"text-align:right;\"> mean </th>\n   <th style=\"text-align:right;\"> median </th>\n   <th style=\"text-align:right;\"> sd </th>\n   <th style=\"text-align:right;\"> mad </th>\n   <th style=\"text-align:right;\"> q5 </th>\n   <th style=\"text-align:right;\"> q95 </th>\n   <th style=\"text-align:right;\"> rhat </th>\n   <th style=\"text-align:right;\"> ess_bulk </th>\n   <th style=\"text-align:right;\"> ess_tail </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> beta[1] </td>\n   <td style=\"text-align:right;\"> -14.3778374 </td>\n   <td style=\"text-align:right;\"> -14.3181500 </td>\n   <td style=\"text-align:right;\"> 3.1682883 </td>\n   <td style=\"text-align:right;\"> 3.3358500 </td>\n   <td style=\"text-align:right;\"> -19.5075250 </td>\n   <td style=\"text-align:right;\"> -9.272253 </td>\n   <td style=\"text-align:right;\"> 0.9998952 </td>\n   <td style=\"text-align:right;\"> 759.6798 </td>\n   <td style=\"text-align:right;\"> 703.3334 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> beta[2] </td>\n   <td style=\"text-align:right;\"> 0.9909604 </td>\n   <td style=\"text-align:right;\"> 0.9885805 </td>\n   <td style=\"text-align:right;\"> 0.1019383 </td>\n   <td style=\"text-align:right;\"> 0.1057909 </td>\n   <td style=\"text-align:right;\"> 0.8269654 </td>\n   <td style=\"text-align:right;\"> 1.155099 </td>\n   <td style=\"text-align:right;\"> 0.9999216 </td>\n   <td style=\"text-align:right;\"> 755.9987 </td>\n   <td style=\"text-align:right;\"> 619.3496 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sigma </td>\n   <td style=\"text-align:right;\"> 6.4028740 </td>\n   <td style=\"text-align:right;\"> 6.3873950 </td>\n   <td style=\"text-align:right;\"> 0.2527972 </td>\n   <td style=\"text-align:right;\"> 0.2463711 </td>\n   <td style=\"text-align:right;\"> 6.0115515 </td>\n   <td style=\"text-align:right;\"> 6.843183 </td>\n   <td style=\"text-align:right;\"> 1.0004609 </td>\n   <td style=\"text-align:right;\"> 625.4537 </td>\n   <td style=\"text-align:right;\"> 685.1401 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {#fig-conj-ci .cell layout-ncol=\"2\" output-location='fragment'}\n\n```{.r .cell-code}\nmcmc_intervals(fit2$draws(variables = c(\"beta\", \"sigma\")))\nmcmc_areas_ridges(fit2$draws(variables = c(\"beta\", \"sigma\")), prob_outer = 0.95, prob = 0.5)\n```\n\n::: {.cell-output-display}\n![Interval plots for $\\beta$ and $\\sigma$.](stan_pres_files/figure-revealjs/fig-conj-ci-1.png){#fig-conj-ci-1 width=960}\n:::\n\n::: {.cell-output-display}\n![Approximate posterior densities for $\\beta$ and $\\sigma$ in a ridgeline plot.](stan_pres_files/figure-revealjs/fig-conj-ci-2.png){#fig-conj-ci-2 width=960}\n:::\n\nPlots for the 50% Credible Interval (inner band) and 95% Credible Interval (outer band) for $\\beta$ and $\\sigma$. Plots were made using the `bayesplot` package.\n:::\n\n\n## Model #2 Posterior Predictive Distribution\n\n\n::: {#fig-conj-ppc .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nfit2$draws(variables = \"y_ppd\") |> \n    as_draws_df() |>\n    as.matrix() -> y_ppd\nppc_dens_overlay(ncaaw$W,\n                 y_ppd[1:50, 1:350]) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins\",\n         x = \"Wins\")\nppc_intervals(ncaaw$W,\n                 y_ppd[1:50, 1:350],\n                 x = ncaaw$FG3pct) +\n    labs(title = \"Density of PPD Draws of NCAAW Wins by 3pt%\",\n         x = \"3pt%\",\n         y = \"Wins\")\n```\n\n::: {.cell-output-display}\n![PPD densities for the wins given 3pt%.](stan_pres_files/figure-revealjs/fig-conj-ppc-1.png){#fig-conj-ppc-1 width=960}\n:::\n\n::: {.cell-output-display}\n![PPD intervals for the wins plotted by 3pt%.](stan_pres_files/figure-revealjs/fig-conj-ppc-2.png){#fig-conj-ppc-2 width=960}\n:::\n\n\n:::\n\n\n# Additional Resources\n\n## Guides for Stan\n\nFirst, here's the **three essential guides** for using Stan:\n\n-   [Stan Function Guide](https://mc-stan.org/docs/functions-reference/index.html) - reference for all the built-in functions and distributions as well as guides for writing custom functions and distributions\n\n-   [Stan User's Guide](https://mc-stan.org/docs/stan-users-guide/index.html) - reference for example models, how to build efficient models, and some inference techniques\n\n-   [Stan Reference Manual](https://mc-stan.org/docs/reference-manual/index.html) - reference for programming in Stan with a focus on how the language works\n\n**Other Stan Packages**\n\n-   [brms](https://paul-buerkner.github.io/brms/index.html): Bayesian regression models using Stan\n\n-   [posterior](https://mc-stan.org/posterior/): Useful for working with Stan output\n\n-   [bayesplot](http://mc-stan.org/bayesplot): ggplot2-based plotting functions for MCMC draws designed work well with Stan\n\n-   [loo](http://mc-stan.org/loo): Leave-one-out cross validation for model checking and selection that works with the log-posterior. Works best with `rstanarm` but can work with `cmdstanr` too.\n\n**Guides to Debugging and Diagnostics**\n\n-   [Stan's Guide to Runtime warnings and convergence problems](https://mc-stan.org/misc/warnings.html)\n\n-   [Prior Choices and Selection](https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations)\n\n-   [Convergence Diagnostics for MCMC](https://arxiv.org/pdf/1909.11827.pdf)\n\n-   [Official Stan Forum](https://discourse.mc-stan.org/)\n\n# Bonus!\n\n## Bonus: Regression Modeling with Incomplete Data\n\n-   Let's use the `brms` package to fit a regression model with incomplete predictor observations.\n\n-   Incomplete data analysis ranges from complete case analysis to multiple imputation, joint modeling, and EM algorithm [@schafer2002].[^3]\n\n-   We're going to use `mice` [@buuren2010mice] and `brms` [@bürkner2018] to demonstrate the imputation and fitting Bayesian regression models.\n\n[^3]: See [@rubin1976, @dempster1977, @rubin1987, @harel2007multiple, @white2011] for more details on incomplete data analysis.\n\n## NCAA Women's Basketball Player's Junior and Senior Years\n\n::: columns\n::: {.column width=\"50%\"}\n-   We'll use junior year scoring (points per game/PPG) to predict senior year scoring for 2020-21 to the 2022-23 seasons.\n\n-   The data set only contains players who played in at least 75% of games each season, so partial seasons due to injury or being a bench player are excluded.\n\n-   Players who only have a junior season are excluded from the analysis.\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nncaaw_i <- read.csv(\"Data/ncaaw-individuals.csv\", header = TRUE)\nhead(ncaaw_i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Name Pos_jr Pos_sr G_jr G_sr PPG_jr PPG_sr Cl_jr\n1     A'Jah Davis      F      F   29   32   16.6   16.2   Jr.\n2 Abby Brockmeyer      F      F   NA   31     NA   16.3   Jr.\n3       Abby Feit      F      F   29   28   15.1   15.5   Jr.\n4     Abby Meyers      G      G   NA   30     NA   17.9   Jr.\n5     Abby Meyers      G      G   NA   35     NA   14.3   Jr.\n6   Adriana Shipp      G      G   NA   30     NA   13.9   Jr.\n```\n:::\n:::\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code}\nggplot(ncaaw_i, aes(PPG_jr, PPG_sr, color = G_jr)) +\n    geom_point(size = 1.5) +\n    scale_color_viridis_c(name = \"G - Jr\") +\n    labs(x = \"PPG - Jr\", y = \"PPG - Sr\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![Points per game (PPG) from Junior and Senior seasons.](stan_pres_files/figure-revealjs/fig-ppg-jr-sr-1.png){#fig-ppg-jr-sr width=960}\n:::\n:::\n\n:::\n:::\n\n## Incomplete Data Structure & Imputation Model\n\n-   The imputation model will be univariate linear regression that use all other variables as predictors.\n\n    -   For example, imputing $PPG_{jr}$ will be done by regressing on $PPG_{sr}, G_{jr}, G_{sr}$.\n\n-   $PPG_{jr}$ and $G_{jr}$ are incomplete for $n_{mis} = 176$ players while $n_{obs} = 98$ players have stats from both years as displayed in @fig-miss-patt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mice)\nm_pat <- md.pattern(ncaaw_i, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![Missing data patterns for the NCAA women's basketball players from 2020-2023 who played in their junior and senior year. The red boxes correspond to missing values, so there are 176 players who recorded full senior seasons (played in >75% of total games) but missing or shortened junior seasons.](stan_pres_files/figure-revealjs/fig-miss-patt-1.png){#fig-miss-patt width=960}\n:::\n:::\n\n\n## Multiple Imputation with mice\n\nFirst, we'll impute before model fitting using `mice`.\n\nMultiple Imputation (by Chained Equations) is a three stage procedure:\n\n1.  Each incomplete variable is imputed $M$ times with posterior predictive draws from a regression model with all other variables as predictors. The procedure iterates through the incomplete variables several times to converge to the posterior predictive distribution of the missing data given the observed.\n2.  These completed data sets are then analyzed individually with a standard complete data method.\n3.  Results from each analysis are combined. Typically this is done with Rubin's rules [@rubin1987], but `brms` follows the advice of @zhou2010 and simply stacks the posterior draw matrices from each fitted model.\n\n\n::: {.cell output-location='fragment' hash='stan_pres_cache/revealjs/mice-fit_695340777f2c658d0ea8857125be0785'}\n\n```{.r .cell-code}\nlibrary(brms)\nimps <- mice(ncaaw_i, m = 10, method = \"norm\", maxit = 10, printFlag = FALSE)\nfit_brm_mice <- brm_multiple(PPG_sr ~ G_jr * PPG_jr, data = imps, chains = 2, refresh = 0)\nsummary(fit_brm_mice)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: PPG_sr ~ G_jr * PPG_jr \n   Data: imps (Number of observations: 274) \n  Draws: 20 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 20000\n\nPopulation-Level Effects: \n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      15.91      4.74     6.14    25.09 1.14       97      180\nG_jr           -0.18      0.18    -0.53     0.19 1.12      110      219\nPPG_jr          0.01      0.27    -0.53     0.56 1.14       94      233\nG_jr:PPG_jr     0.01      0.01    -0.01     0.03 1.12      111      274\n\nFamily Specific Parameters: \n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.19      0.11     1.99     2.41 1.13      100      484\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\n## Imputation During Model Fitting\n\n-   Imputations are made for each incomplete variable using a different conditional model for each variable.\n\n-   This approach differs from MI and MICE in two key ways:\n\n    1.  The model is only fit once since the imputation model is part of the analysis model.\n    2.  The model must be constructed uniquely for each analysis scenario.\n\n\n::: {.cell output-location='column-fragment' hash='stan_pres_cache/revealjs/brm-mi-fit_00f6f3712157170dabe4064db1f206ca'}\n\n```{.r .cell-code}\nbform <- bf(PPG_sr | mi() ~ mi(G_jr) * mi(PPG_jr)) +\n    bf(PPG_jr | mi() ~ G_sr + PPG_sr) +\n    bf(G_jr | mi() ~ G_sr + PPG_sr) + set_rescor(FALSE)\nfit_brm_mi <- brm(bform, data = ncaaw_i, \n                  refresh = 500, iter = 2000, thin = 1,\n                  backend = \"cmdstanr\",\n                  control = list(show_exceptions = FALSE),\n                  chains = 2, cores = 2)\nsummary(fit_brm_mi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Family: MV(gaussian, gaussian, gaussian) \n  Links: mu = identity; sigma = identity\n         mu = identity; sigma = identity\n         mu = identity; sigma = identity \nFormula: PPG_sr | mi() ~ mi(G_jr) * mi(PPG_jr) \n         PPG_jr | mi() ~ G_sr + PPG_sr \n         G_jr | mi() ~ G_sr + PPG_sr \n   Data: ncaaw_i (Number of observations: 274) \n  Draws: 2 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 2000\n\nPopulation-Level Effects: \n                      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS\nPPGsr_Intercept          15.98      2.24    11.52    20.67 1.00     1339\nPPGjr_Intercept           5.95      2.35     1.27    10.37 1.00     1746\nGjr_Intercept             2.96      6.17    -9.41    14.51 1.00     1695\nPPGjr_G_sr               -0.04      0.07    -0.17     0.10 1.00     2013\nPPGjr_PPG_sr              0.71      0.08     0.56     0.88 1.00     1260\nGjr_G_sr                  0.56      0.18     0.22     0.92 1.00     1715\nGjr_PPG_sr                0.27      0.22    -0.17     0.69 1.00     1000\nPPGsr_miG_jr             -0.29      0.09    -0.48    -0.11 1.00     1248\nPPGsr_miPPG_jr           -0.03      0.14    -0.31     0.26 1.00     1229\nPPGsr_miG_jr:miPPG_jr     0.02      0.01     0.01     0.03 1.00     1219\n                      Tail_ESS\nPPGsr_Intercept           1036\nPPGjr_Intercept           1829\nGjr_Intercept             1883\nPPGjr_G_sr                1621\nPPGjr_PPG_sr              1568\nGjr_G_sr                  1633\nGjr_PPG_sr                1399\nPPGsr_miG_jr              1072\nPPGsr_miPPG_jr            1134\nPPGsr_miG_jr:miPPG_jr     1088\n\nFamily Specific Parameters: \n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma_PPGsr     1.86      0.09     1.69     2.05 1.00     2653     1528\nsigma_PPGjr     2.30      0.15     2.04     2.59 1.00      904     1483\nsigma_Gjr       5.35      0.39     4.62     6.16 1.00      710     1113\n\nDraws were sampled using sample(hmc). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n```\n:::\n:::\n\n\n## Diagnostics\n\nSince `brms` is built on Stan we can also take a look at the traceplots of the samples in @fig-brm-mi-trace.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fit_brm_mi, variable = c(\"b_PPGsr\", \"bsp_\"), regex = TRUE, ask = FALSE, N = 4)\n```\n\n::: {.cell-output-display}\n![Traceplots of brms analysis model parameters.](stan_pres_files/figure-revealjs/fig-brm-mi-trace-1.png){#fig-brm-mi-trace width=960}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fit_brm_mi, variable = c(\"b_PPGjr\", \"b_Gjr\"), regex = TRUE, ask = FALSE, N = 6)\n```\n\n::: {.cell-output-display}\n![Traceplots of brms imputation model parameters.](stan_pres_files/figure-revealjs/fig-brm-mi-trace-imp-1.png){#fig-brm-mi-trace-imp width=960}\n:::\n:::\n\n:::\n:::\n\n## Comparison of Estimated Effects\n\n\n::: {#fig-brm-mi-cond-eff .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nplot(brms::conditional_effects(fit_brm_mice, \"PPG_jr:G_jr\", resp = \"PPGsr\"))\nplot(brms::conditional_effects(fit_brm_mi, \"PPG_jr:G_jr\", resp = \"PPGsr\"))\n```\n\n::: {.cell-output-display}\n![Estimates after MICE imputation](stan_pres_files/figure-revealjs/fig-brm-mi-cond-eff-1.png){#fig-brm-mi-cond-eff-1 width=576}\n:::\n\n::: {.cell-output-display}\n![Estimates with joint model](stan_pres_files/figure-revealjs/fig-brm-mi-cond-eff-2.png){#fig-brm-mi-cond-eff-2 width=576}\n:::\n\nThe estimated conditional effects of PPG as a junior and junior-year Games played on PPG as a senior.\n:::\n\n\n## References\n\n::: {#refs}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}