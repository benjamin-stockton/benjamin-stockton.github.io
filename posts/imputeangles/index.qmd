---
title: "How to Use imputeangles"
author: "Ben Stockton"
editor: visual
format: 
    html:
        code-fold: show
        code-tools: true
        toc: true
        toc-location: left
        link-external-newwindow: true
        citations-hover: true
bibliography: references.bib
cache: true
---

In this post, I will provide a brief introduction to using multiple imputation (MI) and then share an example analysis of pitch movement using my `imputeangles` package.

Most statistical analysis methods are designed with complete data in mind, however real-world data is often incomplete with observations missing due to nonresponse, censoring, or measurement issues. The incomplete data cannot be directly analyzed with the complete data statistical methods. While there are methods designed to model the incomplete data with a modified method, the convenience and widely available of implementations it would be highly beneficial to complete the incomplete data. This could be accomplished by removing incomplete cases and performing complete case analysis (CCA), but this could throw out lots of useful data [@schafer2002].

## Multiple Imputation

Imputation is the process of replacing the missing values with values deterministically calculated by the observed data or with values drawn from a probability distribution shaped by the observed data. Two common, but not theoretically valid way to do this are mean imputation (replace with the sample mean or regression predicted values) [@schafer1999multiple] or last observation carried forward (LOCF) for time series or longitudinal data [@moritz2022]. These methods are performed a single time to create a singly imputed (SI) data set. Alternatively, we could with random draws from the observed data or from a predictive distribution based on the observed data. These imputations are worse in terms of providing accurate predictions for the missing value, however they do reflect the uncertainty of the missing value. So repeatedly imputing the missing values to create multiple imputed data sets can propagate the uncertainty to the analysis.

This process is called by Multiple Imputation (MI) and was initially developed by Donald Rubin in the 1970s and 1980s for nonresponse in surveys [@rubin1978, @rubin1987], and then extended to more analysis contexts since the 1990s [@li2006analysis, @harel2003strategies]. The foundation of MI is a three stage process.

1.  Impute - Fill in the missing values with random samples from a predictive distribution (posterior predictive draws theoretically preferred) to create $M$ completed data sets.

2.  Analyze - Analyze each of the $M$ data sets with a complete data method to estimate a quantity of interest $Q$ using estimate $\hat{Q}_m$ and its squared standard error $U_m = SE(\hat{Q})^2$.

3.  Combine - Use Rubin's Rules to combine the estimates and variances to perform inference on the quantity of interest $Q$.

    ```{=tex}
    \begin{align*} \label{eq-rubins-rules}
        \bar{Q} &= \frac{1}{M} \sum_{m=1}^M \hat{Q}_m \\
        \bar{U} &= \frac{1}{M} \sum_{m=1}^M U_m \\
        B &= \frac{1}{M-1} \sum_{m=1}^M (\hat{Q}_m - \bar{Q})^2 \\
        T &= \bar{U} + (1 + \frac{1}{M}) B
    \end{align*}
    ```

Under a set of assumptions[^1], the inferences produced by MI will be unbiased, more efficient than CCA, and confidence valid. These combination rules have been developed for sample means, sample mean differences, regression coefficients, correlation coefficients, and more [@buuren2018 Sec. 5.2].

[^1]: Without making modifications to the core MI procedure, we have to assume normality for $\hat{Q}$, ignorability (missing at random and independent priors for the missingness mechanism and data model), and that all assumptions for the imputation procedure are satisfied.

## Pitch Movement

### Loading Pitch Data

```{r}
#| label: load-pitch-data-no-run
#| echo: true
#| warning: false
#| eval: false

library(mice)
library(Amelia)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(broom.mixed)
library(imputeangles)
theme_set(theme_bw())

peralta_id <- baseballr::playerid_lookup(last_name = "Peralta",
                                         first_name = "Freddy") |> 
  dplyr::pull(mlbam_id)
burnes_id <- baseballr::playerid_lookup(last_name = "Burnes", 
                                        first_name = "Corbin") |> 
  dplyr::pull(mlbam_id)
miley_id <- baseballr::playerid_lookup(last_name = "Miley", 
                                       first_name = "Wade") |> 
  dplyr::pull(mlbam_id)
rea_id <- baseballr::playerid_lookup(last_name = "Rea", 
                                     first_name = "Colin") |> 
  dplyr::pull(mlbam_id)
teheran_id <- 527054
houser_id <- baseballr::playerid_lookup(last_name = "Houser", 
                                        first_name = "Adrian") |> 
  dplyr::pull(mlbam_id)
woodruff_id <- baseballr::playerid_lookup(last_name = "Woodruff", 
                                          first_name = "Brandon") |> 
  dplyr::pull(mlbam_id)

ids_list <- list(peralta_id, burnes_id, rea_id, houser_id, 
                 miley_id, teheran_id, woodruff_id)

# pitches <- readr::read_csv()
pitches <- lapply(ids_list, function(id) {
    baseballr::statcast_search(start_date = "2023-03-01",
                               end_dat = "2023-10-31",
                               player_type = "pitcher", playerid = id)
    }) |>
    bind_rows() |>
    select(
        game_date, pitcher, batter, game_type, home_team, away_team, 
       pitch_type, type, release_speed, release_spin_rate, release_extension,
       spin_axis, release_pos_x, release_pos_z, plate_x, plate_z,
       player_name, events, description, launch_angle, launch_speed
    ) |>
    filter(
        game_type == "R", 
        type != "X"
    ) |>
    mutate(
        spin_axis = spin_axis * pi / 360,
        cos_spin = cos(spin_axis),
        sin_spin = sin(spin_axis),
        cos_2spin = cos(2*spin_axis),
        sin_2spin = sin(2*spin_axis),
        strike = case_when(
            type == "S" ~ 1,
            type == "B" ~ 0,
            TRUE ~ NA
        )
    ) |>
    select(-game_type)

readr::write_csv(pitches, "data/brewers_sp_2023_pitches.csv")
```

```{r}
#| label: load-pitch-data
#| echo: false
#| results: hide
#| warning: false

library(mice)
library(Amelia)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(broom.mixed)
library(imputeangles)
theme_set(theme_bw())

pitches <- readr::read_csv("data/brewers_sp_2023_pitches.csv")

pitches <- pitches |>
    select(
        game_date, pitcher, batter, game_type, home_team, away_team, 
       pitch_type, type, release_speed, release_spin_rate, release_extension,
       spin_axis, release_pos_x, release_pos_z, plate_x, plate_z,
       player_name, events, description
     ) |>
    filter(game_type == "R", 
           type != "X") |>
    mutate(
        spin_axis = spin_axis * pi / 360,
        cos_spin = cos(spin_axis),
        sin_spin = sin(spin_axis),
        cos_2spin = cos(2*spin_axis),
        sin_2spin = sin(2*spin_axis),
        strike = case_when(
            type == "S" ~ 1,
            type == "B" ~ 0,
            TRUE ~ NA
        )
    ) |>
    select(-game_type)
```

```{r}
#| label: fig-miss-map
#| fig-cap: Missinginess matrix plot where red indicates missingness in that observation.

pitches |>
    select(
        pitch_type, release_speed, release_spin_rate, spin_axis,
        release_extension, plate_x, plate_z  
    ) |>
    VIM::matrixplot()

```

Now we'll take a look at an example of how to perform MI in practice in comparison to CCA. We have a data set of $N =$ `r nrow(pitches)` caught pitches (swing and called strikes, balls, or hit by pitches) pitches from the 2023 MLB season with measurements for the pitch outcome, pitch velocity and spin direction and rate at release, release point, horizontal and vertical break, location at the plate, as well as the identity of the batter, pitcher, and ballpark. We will model the pitch outcome based on the other measurements while using random effects for the batter, pitcher, and ballpark. In this analysis our quantity of interest is the effect of spin rate $\beta_{SpinRate}$ on the pitch outcome given the pitch was not fouled off or put in play which will be estimated using a mixed effects logistic regression model.

```{r}
#| label: pitches-thrown-norun
#| echo: true
#| eval: false

pitches |>
    group_by(player_name) |>
    summarize(n_pitches = n(),
              n_fastball = sum(pitch_type %in% c("FC", "FF", "FS", "SI")),
              n_offspeed = sum(pitch_type %in% c("CH", "CU", "SL", "ST")),
              n_missing = sum(is.na(pitch_type))) 

```

```{r}
#| label: tbl-pitches-thrown
#| tbl-cap: Number of pitches thrown by each starting pitcher.
#| echo: false
#| eval: true

pitches$type <- factor(pitches$type)
pitches |>
    group_by(player_name) |>
    summarize(n_pitches = n(),
              n_fastball = sum(pitch_type %in% c("FC", "FF", "FS", "SI")),
              n_offspeed = sum(pitch_type %in% c("CH", "CU", "SL", "ST")),
              n_missing = sum(is.na(pitch_type))) |>
    kableExtra::kable(format = "html", 
                      colnames = c("Name", "N Pitches", "N Fastball", "N Offspeed", "N Missing"))
```

### Imputing Incomplete Pitch Data

Multiple imputation will be performed using the chained equations or fully conditional specification with the `mice` R package [@buuren2010mice] with estimates pooled by the `broom.mixed` R package [@bolkerBroomMixed2022]. The inline data will be imputed by `method = "pmm"` which uses predictive mean matching. The angular data, spin rate, will be imputed by `method = "pnregid"` which uses Bayesian projected normal regression with a constrained covariance matrix $\Sigma$ [@hernandez-stumpfhauser2017] from my `imputeangles` package.

To impute with the projected normal regression, we have to specify to `mice` which variable is angular and which variables are the $\cos$ and $\sin$ of the angular variable. We can do this by doing an empty run of `mice()` by setting the maximum number of cycles to 0. Then we extract the methods vector and predictor matrix to modify and then pass to our actual run of `mice()` with $M = 5$ imputations and $c = 10$ cycles.

```{r}
#| label: set-up-mice
#| echo: true

pitches[,c("release_speed", "release_extension", "release_spin_rate")] <- scale(pitches[,c("release_speed", "release_extension", "release_spin_rate")])
pitches <- pitches |>
    mutate(
        rate_cos_spin = release_spin_rate * cos(spin_axis),
        rate_sin_spin = release_spin_rate * sin(spin_axis)
    )

imp0 <- mice(pitches, m = 1, maxit = 0, method = "pmm")

methods <- imp0$method
methods["spin_axis"] <- "bpnreg"
methods["cos_spin"] <- "~cos(spin_axis)"
methods["sin_spin"] <- "~sin(spin_axis)"
methods["cos_2spin"] <- "~cos(2*spin_axis)"
methods["sin_2spin"] <- "~sin(2*spin_axis)"
methods

pred_mat <- imp0$predictorMatrix
pred_mat[,c("game_date", "pitcher", "batter", "home_team", "away_team", "type",
            "events", "player_name", "description", "spin_axis")] <- 0
pred_mat["spin_axis", c("cos_spin", "sin_spin", "cos_2spin", "sin_2spin")] <- 0
pred_mat[c("cos_spin", "sin_spin", "cos_2spin", "sin_2spin"), ] <- 0
pred_mat[c("cos_spin", "sin_spin", "cos_2spin", "sin_2spin"), "spin_axis"] <- 1

pred_mat[c("spin_axis", "cos_spin", "sin_spin"), c("spin_axis", "cos_spin", "sin_spin", "release_speed", "release_extension")]
```

After setting up the methods vector and predictor matrix, we can run `mice()`.

```{r}
#| label: run-mice-norun
#| echo: true
#| eval: false
imps <- mice(pitches, m = 5, maxit = 5, method = methods,
             predictorMatrix = pred_mat, printFlag = FALSE)
```

```{r}
#| label: run-mice
#| include: false
#| eval: false

imps <- mice(pitches, m = 5, maxit = 5, method = methods,
             predictorMatrix = pred_mat, printFlag = TRUE)

saveRDS(imps, "data/pitch_imputations.rds")
```

### Logistic Regression GLMM with lme4

The logistic regression mixed effects model is then fit to each of the completed data sets. Estimates and their variances are combined with `broom.mixed`.

```{r}
#| label: fit-glmm-imps-norun
#| eval: false
#| echo: true

fit <- with(imps, lme4::glmer(strike ~ cos_spin + sin_spin + cos_2spin + sin_2spin 
                              + release_speed + release_extension 
                              + plate_x * plate_z + release_pos_x * release_pos_z
                              + (1 + pitch_type | player_name),
                              family = binomial(link = "logit")))

pooled <- pool(fit)

summary(pooled)
```

```{r}
#| label: fit-glmm-imps
#| include: false
#| eval: false

imps <- readRDS("data/pitch_imputations.rds")

fit <- with(imps, lme4::glmer(strike ~ cos_spin * pitch_type + sin_spin * pitch_type 
                              + cos_2spin * pitch_type + sin_2spin * pitch_type  
                              + release_speed + release_extension 
                              + rate_cos_spin + rate_sin_spin
                              + plate_x * plate_z + plate_x^2 + plate_z^2 
                              + release_pos_x * release_pos_z
                              + release_pos_x^2 + release_pos_z^2
                              + (1 + pitch_type | player_name),
                              family = binomial(link = "logit")))

saveRDS(fit, "data/fit-glmm-imps.rds")
```

```{r}
#| label: tbl-glmm-pooled
#| tbl-cap: Pooled summary of the fits for the GLMM.
#| echo: false

fit <- readRDS("data/fit-glmm-imps.rds")
pooled <- pool(fit)

summary(pooled) |> 
    mutate(
        se = std.error,
        moe = qt(0.975, df = df) * se,
        u95 = estimate + moe,
        l95 = estimate - moe
    ) |>
    select(term, estimate, se, l95, u95) |>
    kableExtra::kbl(format = "markdown", digits = 4, booktabs = TRUE,
                    col.names = c("Term", "$\\hat{\\beta}$", "$se(\\hat{\\beta})$",
                                 "LB 95% CI", "UB 95% CI"))
```

<!-- ### Modeling with brms -->

```{r}
#| label: fit-brm-imps-norun
#| include: false
#| eval: false
library(brms)

brm_fit <- brm_multiple(strike ~ cos_spin * pitch_type + sin_spin * pitch_type 
                              + cos_2spin * pitch_type + sin_2spin * pitch_type  
                              + release_speed + release_extension 
                              + rate_cos_spin + rate_sin_spin
                              + plate_x * plate_z + plate_x^2 + plate_z^2 
                              + release_pos_x * release_pos_z
                              + release_pos_x^2 + release_pos_z^2
                              + (1 + pitch_type | player_name),
                              family = bernoulli(link = "logit"),
            data = imps,
            cores = 6,
            # threads = threading(6),
            chains = 2,
            refresh = 100,
            save_model = "log-reg-glmm-pitch.stan")

saveRDS(brm_fit, file = "data/brms-glmm-fit.rds")
```

```{r}
#| label: fit-brm-imps-norun
#| echo: false
#| eval: false
library(brms)

brm_fit <- brm_muliple(type ~ cos_spin * pitch_type + sin_spin * pitch_type 
                              + cos_2spin * pitch_type + sin_2spin * pitch_type  
                              + release_speed + release_extension 
                              + rate_cos_spin + rate_sin_spin
                              + plate_x * plate_z + plate_x^2 + plate_z^2 
                              + release_pos_x * release_pos_z
                              + release_pos_x^2 + release_pos_z^2
                              + (1 + pitch_type | player_name),
                              family = binomial(link = "logit"),
            data = imps)
```

```{r}
#| label: load-brm-fit
#| echo: false

brm_fit <- readRDS("data/brms-glmm-fit.rds")
```
